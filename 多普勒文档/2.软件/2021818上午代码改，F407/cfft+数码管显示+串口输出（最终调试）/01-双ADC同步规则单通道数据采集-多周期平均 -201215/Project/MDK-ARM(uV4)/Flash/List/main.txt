; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\..\..\..\ARM\CMSIS\5.7.0\CMSIS\Include -I..\..\User\LED -I..\..\User\systick -I..\..\User -D__MICROLIB -D__UVISION_VERSION=528 -D_RTE_ -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_LOOPUNROLL -DARM_MATH_CM4 --omf_browse=.\flash\obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.PrintfLogo||, CODE, READONLY, ALIGN=2

                  PrintfLogo PROC
;;;215    **********************************************************************************************************/
;;;216    static void PrintfLogo(void)
000000  b510              PUSH     {r4,lr}
;;;217    {
;;;218    	printf("\r\n ----双ADC同步规则单通道数据采集实验----\r\n");
000002  a002              ADR      r0,|L1.12|
000004  f7fffffe          BL       __2printf
;;;219    }
000008  bd10              POP      {r4,pc}
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
00000c  0d0a202d          DCB      "\r\n ----",203,171,"ADC",205,172,178,189,185,230,212,242
000010  2d2d2dcb
000014  ab414443
000018  cdacb2bd
00001c  b9e6d4f2
000020  b5a5cda8          DCB      181,165,205,168,181,192,202,253,190,221,178,201,188,175,202
000024  b5c0cafd
000028  beddb2c9
00002c  bcafca  
00002f  b5d1e92d          DCB      181,209,233,"----\r\n",0
000033  2d2d2d0d
000037  0a00    
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0

                          AREA ||i.arm_cfft_f32_app||, CODE, READONLY, ALIGN=2

                  arm_cfft_f32_app PROC
;;;119        float32_t   pMean_Imag;
;;;120    static void arm_cfft_f32_app(void)
000000  b510              PUSH     {r4,lr}
;;;121    {
000002  ed2d8b0a          VPUSH    {d8-d12}
;;;122    	uint16_t    i, n;
;;;123    
;;;124    
;;;125    	
;;;126    	/* 按照实部，虚部，实部，虚部..... 的顺序存储数据 */
;;;127    	for(i=0; i<fftSize; i++)
000006  2400              MOVS     r4,#0
000008  e02b              B        |L2.98|
                  |L2.10|
;;;128    	{
;;;129    		testInput_Real[i] = (float32_t)((aADCDualConvertedValue[i] & 0xffff) * 3.3f) / 0Xfff;
00000a  48ac              LDR      r0,|L2.700|
00000c  f8500024          LDR      r0,[r0,r4,LSL #2]
000010  b280              UXTH     r0,r0
000012  ee000a10          VMOV     s0,r0
000016  eeb80a40          VCVT.F32.U32 s0,s0
00001a  eddf0aa9          VLDR     s1,|L2.704|
00001e  ee200a20          VMUL.F32 s0,s0,s1
000022  eddf0aa8          VLDR     s1,|L2.708|
000026  ee801a20          VDIV.F32 s2,s0,s1
00002a  48a7              LDR      r0,|L2.712|
00002c  eb000084          ADD      r0,r0,r4,LSL #2
000030  ed801a00          VSTR     s2,[r0,#0]
;;;130            testInput_Imag[i] = (float32_t)((aADCDualConvertedValue[i] >> 16)* 3.3f) / 0Xfff;
000034  48a1              LDR      r0,|L2.700|
000036  f8500024          LDR      r0,[r0,r4,LSL #2]
00003a  0c00              LSRS     r0,r0,#16
00003c  ee000a10          VMOV     s0,r0
000040  eeb80a40          VCVT.F32.U32 s0,s0
000044  eddf0a9e          VLDR     s1,|L2.704|
000048  ee200a20          VMUL.F32 s0,s0,s1
00004c  eddf0a9d          VLDR     s1,|L2.708|
000050  ee801a20          VDIV.F32 s2,s0,s1
000054  489d              LDR      r0,|L2.716|
000056  eb000084          ADD      r0,r0,r4,LSL #2
00005a  ed801a00          VSTR     s2,[r0,#0]
00005e  1c60              ADDS     r0,r4,#1              ;127
000060  b284              UXTH     r4,r0                 ;127
                  |L2.98|
000062  489b              LDR      r0,|L2.720|
000064  6800              LDR      r0,[r0,#0]            ;127  ; fftSize
000066  4284              CMP      r4,r0                 ;127
000068  d3cf              BCC      |L2.10|
;;;131    	}
;;;132    	
;;;133        /* 求平均，计算直流偏量 */
;;;134        arm_mean_f32(testInput_Real,fftSize,&pMean_Real);
00006a  4a9a              LDR      r2,|L2.724|
00006c  4898              LDR      r0,|L2.720|
00006e  6801              LDR      r1,[r0,#0]  ; fftSize
000070  4895              LDR      r0,|L2.712|
000072  f7fffffe          BL       arm_mean_f32
;;;135        arm_mean_f32(testInput_Imag,fftSize,&pMean_Imag);
000076  4a98              LDR      r2,|L2.728|
000078  4895              LDR      r0,|L2.720|
00007a  6801              LDR      r1,[r0,#0]  ; fftSize
00007c  4893              LDR      r0,|L2.716|
00007e  f7fffffe          BL       arm_mean_f32
;;;136        /* 去直流 */
;;;137    	for(i=0; i<fftSize; i++)
000082  2400              MOVS     r4,#0
000084  e021              B        |L2.202|
                  |L2.134|
;;;138    	{
;;;139    		testInput[i*2] = testInput_Real[i]-pMean_Real;
000086  4890              LDR      r0,|L2.712|
000088  eb000084          ADD      r0,r0,r4,LSL #2
00008c  ed900a00          VLDR     s0,[r0,#0]
000090  4890              LDR      r0,|L2.724|
000092  edd00a00          VLDR     s1,[r0,#0]
000096  ee300a60          VSUB.F32 s0,s0,s1
00009a  4990              LDR      r1,|L2.732|
00009c  eb0100c4          ADD      r0,r1,r4,LSL #3
0000a0  ed800a00          VSTR     s0,[r0,#0]
;;;140            testInput[i*2+1] = testInput_Imag[i]-pMean_Imag;
0000a4  4889              LDR      r0,|L2.716|
0000a6  eb000084          ADD      r0,r0,r4,LSL #2
0000aa  ed900a00          VLDR     s0,[r0,#0]
0000ae  488a              LDR      r0,|L2.728|
0000b0  edd00a00          VLDR     s1,[r0,#0]
0000b4  ee300a60          VSUB.F32 s0,s0,s1
0000b8  2001              MOVS     r0,#1
0000ba  eb000044          ADD      r0,r0,r4,LSL #1
0000be  eb010080          ADD      r0,r1,r0,LSL #2
0000c2  ed800a00          VSTR     s0,[r0,#0]
0000c6  1c60              ADDS     r0,r4,#1              ;137
0000c8  b284              UXTH     r4,r0                 ;137
                  |L2.202|
0000ca  4881              LDR      r0,|L2.720|
0000cc  6800              LDR      r0,[r0,#0]            ;137  ; fftSize
0000ce  4284              CMP      r4,r0                 ;137
0000d0  d3d9              BCC      |L2.134|
;;;141    	}
;;;142    	//输出原始信号
;;;143    //	for(i=0; i<fftSize; i++)
;;;144    //	{
;;;145    //		printf("%f,", testInput[i*2]);
;;;146    //		printf("%f\r\n", testInput[i*2+1]);
;;;147    ////		printf("%f,", testInput_Real[i]);
;;;148    ////		printf("%f\r\n", testInput_Imag[i]);
;;;149    //	}
;;;150    	/* CFFT变换 */ 
;;;151    	arm_cfft_f32(&arm_cfft_sR_f32_len1024, testInput, ifftFlag1, doBitReverse);
0000d2  4883              LDR      r0,|L2.736|
0000d4  7803              LDRB     r3,[r0,#0]  ; doBitReverse
0000d6  4883              LDR      r0,|L2.740|
0000d8  7802              LDRB     r2,[r0,#0]  ; ifftFlag1
0000da  4980              LDR      r1,|L2.732|
0000dc  4882              LDR      r0,|L2.744|
0000de  f7fffffe          BL       arm_cfft_f32
;;;152    
;;;153    //	/* 求解模值  */ 
;;;154    	arm_cmplx_mag_f32(testInput, testOutput, fftSize);
0000e2  487b              LDR      r0,|L2.720|
0000e4  4981              LDR      r1,|L2.748|
0000e6  6802              LDR      r2,[r0,#0]  ; fftSize
0000e8  487c              LDR      r0,|L2.732|
0000ea  f7fffffe          BL       arm_cmplx_mag_f32
;;;155    //    /* 取半个长度数组不可以要 数据并不是对称的  */
;;;156    
;;;157    		for(i=0; i<fftSize; i++)
0000ee  2400              MOVS     r4,#0
0000f0  e001              B        |L2.246|
                  |L2.242|
0000f2  1c60              ADDS     r0,r4,#1
0000f4  b284              UXTH     r4,r0
                  |L2.246|
0000f6  4876              LDR      r0,|L2.720|
0000f8  6800              LDR      r0,[r0,#0]  ; fftSize
0000fa  4284              CMP      r4,r0
0000fc  d3f9              BCC      |L2.242|
;;;158    	{
;;;159    //		printf("%f\r\n", testOutput[i]);
;;;160    //		if(testOutput[i]<=20)
;;;161    //		{
;;;162    //			testOutput[i]=0;
;;;163    //		}
;;;164    	}
;;;165    ////    /* 滤除工频干扰，阀值设为60Hz  */
;;;166    ////    n = 60*DMA_BUFFER_SIZE/ADC_FREQUENCY;
;;;167    //	//设置阀值，将模值数据中低于阀值的数据置为0
;;;168    ////	for(i=0; i<n; i++)
;;;169    ////	{
;;;170    ////      testOutput_half[i] = 0;
;;;171    ////	}
;;;172        /* 求最大频点及其位置下标  */
;;;173      arm_max_f32(testOutput, fftSize, &pResult, &pIndex);
0000fe  4b7c              LDR      r3,|L2.752|
000100  4a7c              LDR      r2,|L2.756|
000102  4873              LDR      r0,|L2.720|
000104  6801              LDR      r1,[r0,#0]  ; fftSize
000106  4879              LDR      r0,|L2.748|
000108  f7fffffe          BL       arm_max_f32
;;;174    	pIndex1=pIndex;
00010c  4878              LDR      r0,|L2.752|
00010e  6800              LDR      r0,[r0,#0]  ; pIndex
000110  4979              LDR      r1,|L2.760|
000112  6008              STR      r0,[r1,#0]  ; pIndex1
;;;175    	if(pIndex1>512)
000114  4608              MOV      r0,r1
000116  6800              LDR      r0,[r0,#0]  ; pIndex1
000118  f5b07f00          CMP      r0,#0x200
00011c  d927              BLS      |L2.366|
;;;176    	{
;;;177    		pIndex1=fftSize-pIndex1;
00011e  486c              LDR      r0,|L2.720|
000120  6800              LDR      r0,[r0,#0]  ; fftSize
000122  6809              LDR      r1,[r1,#0]  ; pIndex1
000124  1a40              SUBS     r0,r0,r1
000126  4974              LDR      r1,|L2.760|
000128  6008              STR      r0,[r1,#0]  ; pIndex1
;;;178    		Doppler_velocity = -3.6*pIndex1*ADC_FREQUENCY/(fftSize*160);
00012a  4969              LDR      r1,|L2.720|
00012c  6809              LDR      r1,[r1,#0]  ; fftSize
00012e  eb010181          ADD      r1,r1,r1,LSL #2
000132  0148              LSLS     r0,r1,#5
000134  f7fffffe          BL       __aeabi_ui2d
000138  ec410b19          VMOV     d9,r0,r1
00013c  486e              LDR      r0,|L2.760|
00013e  6800              LDR      r0,[r0,#0]  ; pIndex1
000140  f7fffffe          BL       __aeabi_ui2d
000144  ed9f0b6d          VLDR     d0,|L2.764|
000148  ec532b10          VMOV     r2,r3,d0
00014c  f7fffffe          BL       __aeabi_dmul
000150  ed9f0b6c          VLDR     d0,|L2.772|
000154  ec532b10          VMOV     r2,r3,d0
000158  f7fffffe          BL       __aeabi_dmul
00015c  ec532b19          VMOV     r2,r3,d9
000160  f7fffffe          BL       __aeabi_ddiv
000164  f7fffffe          BL       __aeabi_d2f
000168  4968              LDR      r1,|L2.780|
00016a  6008              STR      r0,[r1,#0]  ; Doppler_velocity
00016c  e020              B        |L2.432|
                  |L2.366|
;;;179    	}
;;;180    	else
;;;181    	{
;;;182        /* 求取多普勒速度  */
;;;183        Doppler_velocity = 3.6*pIndex1*ADC_FREQUENCY/(fftSize*160);
00016e  4958              LDR      r1,|L2.720|
000170  6809              LDR      r1,[r1,#0]  ; fftSize
000172  eb010181          ADD      r1,r1,r1,LSL #2
000176  0148              LSLS     r0,r1,#5
000178  f7fffffe          BL       __aeabi_ui2d
00017c  ec410b19          VMOV     d9,r0,r1
000180  485d              LDR      r0,|L2.760|
000182  6800              LDR      r0,[r0,#0]  ; pIndex1
000184  f7fffffe          BL       __aeabi_ui2d
000188  ed9f0b61          VLDR     d0,|L2.784|
00018c  ec532b10          VMOV     r2,r3,d0
000190  f7fffffe          BL       __aeabi_dmul
000194  ed9f0b5b          VLDR     d0,|L2.772|
000198  ec532b10          VMOV     r2,r3,d0
00019c  f7fffffe          BL       __aeabi_dmul
0001a0  ec532b19          VMOV     r2,r3,d9
0001a4  f7fffffe          BL       __aeabi_ddiv
0001a8  f7fffffe          BL       __aeabi_d2f
0001ac  4957              LDR      r1,|L2.780|
0001ae  6008              STR      r0,[r1,#0]  ; Doppler_velocity
                  |L2.432|
;;;184    	}
;;;185        
;;;186    //  printf("arm_max_f32 : pResult = %f pIndex = %d Doppler_velocity = %f\r\n", pResult, pIndex, Doppler_velocity);
;;;187    
;;;188    	Doppler_velocity1= fabs(Doppler_velocity);
0001b0  4856              LDR      r0,|L2.780|
0001b2  6800              LDR      r0,[r0,#0]  ; Doppler_velocity
0001b4  f7fffffe          BL       __aeabi_f2d
0001b8  ec410b19          VMOV     d9,r0,r1
0001bc  eeb00a49          VMOV.F32 s0,s18
0001c0  eef00a69          VMOV.F32 s1,s19
0001c4  f7fffffe          BL       __hardfp_fabs
0001c8  eeb08a40          VMOV.F32 s16,s0
0001cc  eef08a60          VMOV.F32 s17,s1
0001d0  ec510b18          VMOV     r0,r1,d8
0001d4  f7fffffe          BL       __aeabi_d2f
0001d8  494f              LDR      r1,|L2.792|
0001da  6008              STR      r0,[r1,#0]  ; Doppler_velocity1
;;;189    	//数码管显示数据
;;;190    	Doppler_velocity_output = Doppler_velocity1*100;
0001dc  4608              MOV      r0,r1
0001de  ed900a00          VLDR     s0,[r0,#0]
0001e2  eddf0a4e          VLDR     s1,|L2.796|
0001e6  ee200a20          VMUL.F32 s0,s0,s1
0001ea  eebc0ac0          VCVT.U32.F32 s0,s0
0001ee  484c              LDR      r0,|L2.800|
0001f0  ed800a00          VSTR     s0,[r0,#0]
;;;191    	Doppler_velocity_output1 = Doppler_velocity_output % 10;
0001f4  6800              LDR      r0,[r0,#0]  ; Doppler_velocity_output
0001f6  210a              MOVS     r1,#0xa
0001f8  fbb0f2f1          UDIV     r2,r0,r1
0001fc  fb010012          MLS      r0,r1,r2,r0
000200  4948              LDR      r1,|L2.804|
000202  7008              STRB     r0,[r1,#0]
;;;192    	Doppler_velocity_output2 = (Doppler_velocity_output % 100)/10;
000204  4846              LDR      r0,|L2.800|
000206  6800              LDR      r0,[r0,#0]  ; Doppler_velocity_output
000208  2164              MOVS     r1,#0x64
00020a  fbb0f2f1          UDIV     r2,r0,r1
00020e  fb010012          MLS      r0,r1,r2,r0
000212  210a              MOVS     r1,#0xa
000214  fbb0f0f1          UDIV     r0,r0,r1
000218  4943              LDR      r1,|L2.808|
00021a  7008              STRB     r0,[r1,#0]
;;;193    	ST0;	
00021c  f44f7180          MOV      r1,#0x100
000220  4842              LDR      r0,|L2.812|
000222  f7fffffe          BL       GPIO_ResetBits
;;;194    	output((Doppler_velocity_output2 << 4)|Doppler_velocity_output1);
000226  493f              LDR      r1,|L2.804|
000228  7809              LDRB     r1,[r1,#0]  ; Doppler_velocity_output1
00022a  4a3f              LDR      r2,|L2.808|
00022c  7812              LDRB     r2,[r2,#0]  ; Doppler_velocity_output2
00022e  ea411102          ORR      r1,r1,r2,LSL #4
000232  b2c8              UXTB     r0,r1
000234  f7fffffe          BL       output
;;;195    //	printf("%d",(Doppler_velocity_output2 << 4)|Doppler_velocity_output1);
;;;196    	Doppler_velocity_output1 = (Doppler_velocity_output / 100)%10;
000238  4839              LDR      r0,|L2.800|
00023a  6800              LDR      r0,[r0,#0]  ; Doppler_velocity_output
00023c  2164              MOVS     r1,#0x64
00023e  fbb0f0f1          UDIV     r0,r0,r1
000242  210a              MOVS     r1,#0xa
000244  fbb0f2f1          UDIV     r2,r0,r1
000248  fb010012          MLS      r0,r1,r2,r0
00024c  4935              LDR      r1,|L2.804|
00024e  7008              STRB     r0,[r1,#0]
;;;197    	Doppler_velocity_output2 = (Doppler_velocity_output / 1000)%10;	
000250  4833              LDR      r0,|L2.800|
000252  6800              LDR      r0,[r0,#0]  ; Doppler_velocity_output
000254  f44f717a          MOV      r1,#0x3e8
000258  fbb0f0f1          UDIV     r0,r0,r1
00025c  210a              MOVS     r1,#0xa
00025e  fbb0f2f1          UDIV     r2,r0,r1
000262  fb010012          MLS      r0,r1,r2,r0
000266  4930              LDR      r1,|L2.808|
000268  7008              STRB     r0,[r1,#0]
;;;198    	output((Doppler_velocity_output2 << 4)|Doppler_velocity_output1);
00026a  492e              LDR      r1,|L2.804|
00026c  7809              LDRB     r1,[r1,#0]  ; Doppler_velocity_output1
00026e  4a2e              LDR      r2,|L2.808|
000270  7812              LDRB     r2,[r2,#0]  ; Doppler_velocity_output2
000272  ea411102          ORR      r1,r1,r2,LSL #4
000276  b2c8              UXTB     r0,r1
000278  f7fffffe          BL       output
;;;199    	if(Doppler_velocity<0)
00027c  4823              LDR      r0,|L2.780|
00027e  ed900a00          VLDR     s0,[r0,#0]
000282  eeb50ac0          VCMPE.F32 s0,#0.0
000286  eef1fa10          VMRS     APSR_nzcv,FPSCR
00028a  d203              BCS      |L2.660|
;;;200      output(0xAb);
00028c  20ab              MOVS     r0,#0xab
00028e  f7fffffe          BL       output
000292  e002              B        |L2.666|
                  |L2.660|
;;;201    	else
;;;202    	{
;;;203    		output(0xAa);
000294  20aa              MOVS     r0,#0xaa
000296  f7fffffe          BL       output
                  |L2.666|
;;;204    	}
;;;205    	ST1;
00029a  f44f7180          MOV      r1,#0x100
00029e  4823              LDR      r0,|L2.812|
0002a0  f7fffffe          BL       GPIO_SetBits
;;;206    	delay_us(1);
0002a4  2001              MOVS     r0,#1
0002a6  f7fffffe          BL       delay_us
;;;207    	ST0;
0002aa  f44f7180          MOV      r1,#0x100
0002ae  481f              LDR      r0,|L2.812|
0002b0  f7fffffe          BL       GPIO_ResetBits
;;;208    	
;;;209    }
0002b4  ecbd8b0a          VPOP     {d8-d12}
0002b8  bd10              POP      {r4,pc}
;;;210    /**********************************************************************************************************
                          ENDP

0002ba  0000              DCW      0x0000
                  |L2.700|
                          DCD      aADCDualConvertedValue
                  |L2.704|
0002c0  40533333          DCFS     0x40533333 ; 3.2999999523162842
                  |L2.708|
0002c4  457ff000          DCFS     0x457ff000 ; 4095
                  |L2.712|
                          DCD      testInput_Real
                  |L2.716|
                          DCD      testInput_Imag
                  |L2.720|
                          DCD      fftSize
                  |L2.724|
                          DCD      pMean_Real
                  |L2.728|
                          DCD      pMean_Imag
                  |L2.732|
                          DCD      testInput
                  |L2.736|
                          DCD      doBitReverse
                  |L2.740|
                          DCD      ifftFlag1
                  |L2.744|
                          DCD      arm_cfft_sR_f32_len1024
                  |L2.748|
                          DCD      testOutput
                  |L2.752|
                          DCD      pIndex
                  |L2.756|
                          DCD      pResult
                  |L2.760|
                          DCD      pIndex1
                  |L2.764|
0002fc  cccccccd          DCFD     0xc00ccccccccccccd ; -3.6000000000000001
000300  c00ccccc
                  |L2.772|
000304  00000000          DCFD     0x40d3880000000000 ; 20000
000308  40d38800
                  |L2.780|
                          DCD      Doppler_velocity
                  |L2.784|
000310  cccccccd          DCFD     0x400ccccccccccccd ; 3.6000000000000001
000314  400ccccc
                  |L2.792|
                          DCD      Doppler_velocity1
                  |L2.796|
00031c  42c80000          DCFS     0x42c80000 ; 100
                  |L2.800|
                          DCD      Doppler_velocity_output
                  |L2.804|
                          DCD      Doppler_velocity_output1
                  |L2.808|
                          DCD      Doppler_velocity_output2
                  |L2.812|
                          DCD      0x40020000

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  main PROC
;;;51     *********************************************************************************************************/
;;;52     int main(void)
000000  ed2d8b02          VPUSH    {d8}
;;;53     {   
;;;54     	HSI_SetSysClock(16,336,2,7);
000004  2307              MOVS     r3,#7
000006  2202              MOVS     r2,#2
000008  f44f71a8          MOV      r1,#0x150
00000c  2010              MOVS     r0,#0x10
00000e  f7fffffe          BL       HSI_SetSysClock
;;;55     //    uint16_t i;
;;;56         /* ST固件库中的启动文件已经执行了 SystemInit() 函数，该函数在 system_stm32f4xx.c 文件，主要功能是
;;;57     	配置CPU系统的时钟，内部Flash访问时序，配置FSMC用于外部SRAM。*/
;;;58     	bsp_Init();		/* 硬件初始化 */
000012  f7fffffe          BL       bsp_Init
;;;59         LED_GPIO_Config();//数码管初始化
000016  f7fffffe          BL       LED_GPIO_Config
;;;60     //	PrintfLogo();	/* 打印例程信息到串口1 */
;;;61     	SysTick_Init(168);
00001a  20a8              MOVS     r0,#0xa8
00001c  f7fffffe          BL       SysTick_Init
;;;62     //    delay_ms(5000);
;;;63     //	bsp_StartAutoTimer(0, 500);	/* 启动1个500ms的自动重装的定时器 */
;;;64     	bsp_ADCTrigEnable();  /* 启动I,Q 双通道ADC采样，采样率取决于ADC_FREQUENCY，定义于bsp_timer.h */
000020  f7fffffe          BL       bsp_ADCTrigEnable
;;;65       FLAG_DMA_TC = 0;
000024  2000              MOVS     r0,#0
000026  4921              LDR      r1,|L3.172|
000028  7008              STRB     r0,[r1,#0]
;;;66     	/* 进入主程序循环体 */
;;;67     	//显示测试
;;;68     	ST0;
00002a  f44f7180          MOV      r1,#0x100
00002e  4820              LDR      r0,|L3.176|
000030  f7fffffe          BL       GPIO_ResetBits
;;;69     	output(0x34);
000034  2034              MOVS     r0,#0x34
000036  f7fffffe          BL       output
;;;70     	delay_us(2);
00003a  2002              MOVS     r0,#2
00003c  f7fffffe          BL       delay_us
;;;71     	output(0x12);
000040  2012              MOVS     r0,#0x12
000042  f7fffffe          BL       output
;;;72     	delay_us(2);
000046  2002              MOVS     r0,#2
000048  f7fffffe          BL       delay_us
;;;73     	output(0x56);
00004c  2056              MOVS     r0,#0x56
00004e  f7fffffe          BL       output
;;;74     	ST1;
000052  f44f7180          MOV      r1,#0x100
000056  4816              LDR      r0,|L3.176|
000058  f7fffffe          BL       GPIO_SetBits
;;;75     	delay_us(1);
00005c  2001              MOVS     r0,#1
00005e  f7fffffe          BL       delay_us
;;;76     	ST0;
000062  f44f7180          MOV      r1,#0x100
000066  4812              LDR      r0,|L3.176|
000068  f7fffffe          BL       GPIO_ResetBits
;;;77     	
;;;78     	
;;;79     	
;;;80     	while (1)
00006c  e01d              B        |L3.170|
                  |L3.110|
;;;81     	{
;;;82     //		while(1)
;;;83     //		{
;;;84     //			GPIO_ToggleBits(GPIOA,GPIO_Pin_15);
;;;85     //			delay_us(10);
;;;86     //		}
;;;87     		bsp_Idle();		/* 这个函数在bsp.c文件。用户可以修改这个函数实现CPU休眠和喂狗 */ 
00006e  f7fffffe          BL       bsp_Idle
;;;88     		/*  DMA传输完成中断里改变FLAG_DMA_TC标志*/
;;;89     		
;;;90     
;;;91     		if (FLAG_DMA_TC == 1)
000072  480e              LDR      r0,|L3.172|
000074  7800              LDRB     r0,[r0,#0]  ; FLAG_DMA_TC
000076  2801              CMP      r0,#1
000078  d108              BNE      |L3.140|
;;;92     		{
;;;93     				bsp_ADCTrigDisable(); //该函数可以放在中断里面
00007a  f7fffffe          BL       bsp_ADCTrigDisable
;;;94     				arm_cfft_f32_app(); //计算FFT和求模，并求取最大值和下标
00007e  f7fffffe          BL       arm_cfft_f32_app
;;;95     				bsp_ADCTrigEnable(); 
000082  f7fffffe          BL       bsp_ADCTrigEnable
;;;96     				FLAG_DMA_TC = 0;
000086  2000              MOVS     r0,#0
000088  4908              LDR      r1,|L3.172|
00008a  7008              STRB     r0,[r1,#0]
                  |L3.140|
;;;97     //			 delay_ms(100);
;;;98     		}
;;;99     
;;;100    		if (bsp_CheckTimer(0))	/* 判断软件定时器超时时间 */
00008c  2000              MOVS     r0,#0
00008e  f7fffffe          BL       bsp_CheckTimer
000092  b150              CBZ      r0,|L3.170|
;;;101    		{           
;;;102    			printf("uwADC1_2ConvertedVoltage = %0.5f\r\n", Doppler_velocity);
000094  4807              LDR      r0,|L3.180|
000096  6800              LDR      r0,[r0,#0]  ; Doppler_velocity
000098  f7fffffe          BL       __aeabi_f2d
00009c  ec410b18          VMOV     d8,r0,r1
0000a0  ec532b18          VMOV     r2,r3,d8
0000a4  a004              ADR      r0,|L3.184|
0000a6  f7fffffe          BL       __2printf
                  |L3.170|
0000aa  e7e0              B        |L3.110|
;;;103    		}
;;;104    
;;;105    	}
;;;106    }
;;;107    /*
                          ENDP

                  |L3.172|
                          DCD      FLAG_DMA_TC
                  |L3.176|
                          DCD      0x40020000
                  |L3.180|
                          DCD      Doppler_velocity
                  |L3.184|
0000b8  75774144          DCB      "uwADC1_2ConvertedVoltage = %0.5f\r\n",0
0000bc  43315f32
0000c0  436f6e76
0000c4  65727465
0000c8  64566f6c
0000cc  74616765
0000d0  203d2025
0000d4  302e3566
0000d8  0d0a00  
0000db  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  testOutput
                          %        4096
                  testInput
                          %        8192
                  testInput_Real
                          %        4096
                  testInput_Imag
                          %        4096

                          AREA ||.data||, DATA, ALIGN=2

                  fftSize
                          DCD      0x00000400
                  ifftFlag1
                          DCD      0x00000000
                  doBitReverse
                          DCD      0x00000001
                  Doppler_velocity
00000c  00000000          DCFS     0x00000000 ; 0
                  Doppler_velocity1
000010  00000000          DCFS     0x00000000 ; 0
                  Doppler_velocity_output
                          DCD      0x00000000
                  Doppler_velocity_output1
000018  00                DCB      0x00
                  Doppler_velocity_output2
000019  000000            DCB      0x00,0x00,0x00
                  pResult
                          DCD      0x00000000
                  pIndex
                          DCD      0x00000000
                  pIndex1
                          DCD      0x00000000
                  pMean_Real
                          DCD      0x00000000
                  pMean_Imag
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_fftSize____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_fftSize____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_fftSize____REVSH|
#line 144
|__asm___6_main_c_fftSize____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_fftSize____RRX|
#line 300
|__asm___6_main_c_fftSize____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
