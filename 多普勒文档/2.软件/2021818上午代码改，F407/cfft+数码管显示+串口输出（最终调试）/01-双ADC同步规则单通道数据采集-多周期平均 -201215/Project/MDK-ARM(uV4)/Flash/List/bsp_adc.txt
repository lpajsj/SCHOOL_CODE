; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_adc.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_adc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\..\..\..\ARM\CMSIS\5.7.0\CMSIS\Include -I..\..\User\LED -I..\..\User\systick -I..\..\User -D__MICROLIB -D__UVISION_VERSION=528 -D_RTE_ -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_LOOPUNROLL -DARM_MATH_CM4 --omf_browse=.\flash\obj\bsp_adc.crf ..\..\User\bsp_stm32f4xx\src\bsp_adc.c]
                          THUMB

                          AREA ||i.bsp_ADCTrigDisable||, CODE, READONLY, ALIGN=2

                  bsp_ADCTrigDisable PROC
;;;130    
;;;131    void bsp_ADCTrigDisable(void)
000000  b510              PUSH     {r4,lr}
;;;132    {
;;;133    	TIM_CtrlPWMOutputs(TIM1, DISABLE);  	//关闭TIM1通道OC3的PWM 输出
000002  2100              MOVS     r1,#0
000004  4801              LDR      r0,|L1.12|
000006  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;134    }
00000a  bd10              POP      {r4,pc}
                          ENDP

                  |L1.12|
                          DCD      0x40010000

                          AREA ||i.bsp_ADCTrigEnable||, CODE, READONLY, ALIGN=2

                  bsp_ADCTrigEnable PROC
;;;125    **********************************************************************************************************/
;;;126    void bsp_ADCTrigEnable(void)
000000  b510              PUSH     {r4,lr}
;;;127    {
;;;128    	TIM_CtrlPWMOutputs(TIM1, ENABLE);  	//使能TIM1通道OC3的PWM 输出
000002  2101              MOVS     r1,#1
000004  4801              LDR      r0,|L2.12|
000006  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;129    }
00000a  bd10              POP      {r4,pc}
;;;130    
                          ENDP

                  |L2.12|
                          DCD      0x40010000

                          AREA ||i.bsp_InitADC||, CODE, READONLY, ALIGN=2

                  bsp_InitADC PROC
;;;21     **********************************************************************************************************/
;;;22     void bsp_InitADC(void)
000000  b500              PUSH     {lr}
;;;23     {
000002  b09d              SUB      sp,sp,#0x74
;;;24     	ADC_InitTypeDef       ADC_InitStructure;
;;;25     	ADC_CommonInitTypeDef ADC_CommonInitStructure;
;;;26     	DMA_InitTypeDef       DMA_InitStructure;
;;;27     	GPIO_InitTypeDef      GPIO_InitStructure;
;;;28         NVIC_InitTypeDef      NVIC_InitStructure;
;;;29     	
;;;30     	/* 使能外设时钟 */
;;;31     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 | RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOC, ENABLE);
000004  2101              MOVS     r1,#1
000006  484b              LDR      r0,|L3.308|
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;32     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  f44f7040          MOV      r0,#0x300
000012  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;33         
;;;34         /* 配置引脚 */
;;;35        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
000016  2001              MOVS     r0,#1
000018  9002              STR      r0,[sp,#8]
;;;36     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
00001a  2003              MOVS     r0,#3
00001c  f88d000c          STRB     r0,[sp,#0xc]
;;;37     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
000020  2000              MOVS     r0,#0
000022  f88d000f          STRB     r0,[sp,#0xf]
;;;38     	GPIO_Init(GPIOC, &GPIO_InitStructure);
000026  a902              ADD      r1,sp,#8
000028  4843              LDR      r0,|L3.312|
00002a  f7fffffe          BL       GPIO_Init
;;;39         
;;;40        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
00002e  2010              MOVS     r0,#0x10
000030  9002              STR      r0,[sp,#8]
;;;41     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
000032  2003              MOVS     r0,#3
000034  f88d000c          STRB     r0,[sp,#0xc]
;;;42     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
000038  2000              MOVS     r0,#0
00003a  f88d000f          STRB     r0,[sp,#0xf]
;;;43     	GPIO_Init(GPIOC, &GPIO_InitStructure);
00003e  a902              ADD      r1,sp,#8
000040  483d              LDR      r0,|L3.312|
000042  f7fffffe          BL       GPIO_Init
;;;44     
;;;45     	/* DMA2 Stream0 channel0 配置-------------------------------------------------- */
;;;46     	DMA_InitStructure.DMA_Channel = DMA_Channel_0;  //ADC1 与DMA2的Stream0的Channel0对应，可参见手册
000046  2000              MOVS     r0,#0
000048  9004              STR      r0,[sp,#0x10]
;;;47         DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&aADCDualConvertedValue;
00004a  483c              LDR      r0,|L3.316|
00004c  9006              STR      r0,[sp,#0x18]
;;;48         DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)ADC_CDR_ADDRESS;
00004e  483c              LDR      r0,|L3.320|
000050  9005              STR      r0,[sp,#0x14]
;;;49         DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
000052  2000              MOVS     r0,#0
000054  9007              STR      r0,[sp,#0x1c]
;;;50         DMA_InitStructure.DMA_BufferSize = DMA_BUFFER_SIZE;
000056  f44f6080          MOV      r0,#0x400
00005a  9008              STR      r0,[sp,#0x20]
;;;51         DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
00005c  2000              MOVS     r0,#0
00005e  9009              STR      r0,[sp,#0x24]
;;;52         DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
000060  f44f6080          MOV      r0,#0x400
000064  900a              STR      r0,[sp,#0x28]
;;;53         DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
000066  0080              LSLS     r0,r0,#2
000068  900b              STR      r0,[sp,#0x2c]
;;;54         DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
00006a  0080              LSLS     r0,r0,#2
00006c  900c              STR      r0,[sp,#0x30]
;;;55         DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
00006e  1180              ASRS     r0,r0,#6
000070  900d              STR      r0,[sp,#0x34]
;;;56         DMA_InitStructure.DMA_Priority = DMA_Priority_High;
000072  0240              LSLS     r0,r0,#9
000074  900e              STR      r0,[sp,#0x38]
;;;57         DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;         
000076  2004              MOVS     r0,#4
000078  900f              STR      r0,[sp,#0x3c]
;;;58         DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
00007a  2001              MOVS     r0,#1
00007c  9010              STR      r0,[sp,#0x40]
;;;59         DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
00007e  2000              MOVS     r0,#0
000080  9011              STR      r0,[sp,#0x44]
;;;60         DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
000082  9012              STR      r0,[sp,#0x48]
;;;61         DMA_Init(DMA2_Stream0, &DMA_InitStructure);
000084  a904              ADD      r1,sp,#0x10
000086  482f              LDR      r0,|L3.324|
000088  f7fffffe          BL       DMA_Init
;;;62     
;;;63         /* Enable DMA Stream Transfer Complete interrupt */
;;;64         DMA_ITConfig(DMA2_Stream0, DMA_IT_TC, ENABLE);
00008c  2201              MOVS     r2,#1
00008e  2110              MOVS     r1,#0x10
000090  482c              LDR      r0,|L3.324|
000092  f7fffffe          BL       DMA_ITConfig
;;;65     
;;;66         /* DMA2_Stream0 enable */
;;;67         DMA_Cmd(DMA2_Stream0, ENABLE);
000096  2101              MOVS     r1,#1
000098  482a              LDR      r0,|L3.324|
00009a  f7fffffe          BL       DMA_Cmd
;;;68         
;;;69         /* Enable the DMA Stream IRQ Channel */
;;;70         NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream0_IRQn;
00009e  2038              MOVS     r0,#0x38
0000a0  f88d0004          STRB     r0,[sp,#4]
;;;71         NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;   //默认中断优先级分组0
0000a4  2000              MOVS     r0,#0
0000a6  f88d0005          STRB     r0,[sp,#5]
;;;72         NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
0000aa  f88d0006          STRB     r0,[sp,#6]
;;;73         NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
0000ae  2001              MOVS     r0,#1
0000b0  f88d0007          STRB     r0,[sp,#7]
;;;74         NVIC_Init(&NVIC_InitStructure); 
0000b4  a801              ADD      r0,sp,#4
0000b6  f7fffffe          BL       NVIC_Init
;;;75     	/* 
;;;76     	************************************************************************************************************************
;;;77     	PCLK2 = HCLK / 2 
;;;78     	下面选择的是2分频 
;;;79     	ADCCLK = PCLK2 / 8 = HCLK / 16 = 168 / 16 = 10.5M 
;;;80     	ADC采样频率： Sampling Time + Conversion Time = 480 + 12 cycles = 492cyc 
;;;81     	              Conversion Time = 10.5MHz / 492cyc = 21ksps.
;;;82     	************************************************************************************************************************
;;;83     	*/
;;;84     	/* ADC 公共部分配置 *************************************************/ 
;;;85     	// 480+12周期转换 二分频一次转换1/42M*492=11.7us  11.7us对应计数器初值在 1968  最高取样频率168000000/2000=84000
;;;86         ADC_CommonInitStructure.ADC_Mode = ADC_DualMode_RegSimult;
0000ba  2006              MOVS     r0,#6
0000bc  9013              STR      r0,[sp,#0x4c]
;;;87         ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
0000be  2000              MOVS     r0,#0
0000c0  9014              STR      r0,[sp,#0x50]
;;;88         ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_2;
0000c2  f44f4000          MOV      r0,#0x8000
0000c6  9015              STR      r0,[sp,#0x54]
;;;89         ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles; //两次采样之间的延时时间，总采样时间12+5+480
0000c8  2000              MOVS     r0,#0
0000ca  9016              STR      r0,[sp,#0x58]
;;;90         ADC_CommonInit(&ADC_CommonInitStructure);
0000cc  a813              ADD      r0,sp,#0x4c
0000ce  f7fffffe          BL       ADC_CommonInit
;;;91     
;;;92         ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
0000d2  2000              MOVS     r0,#0
0000d4  9017              STR      r0,[sp,#0x5c]
;;;93         ADC_InitStructure.ADC_ScanConvMode = DISABLE;
0000d6  f88d0060          STRB     r0,[sp,#0x60]
;;;94         ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
0000da  f88d0061          STRB     r0,[sp,#0x61]
;;;95         ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Rising;
0000de  f04f5080          MOV      r0,#0x10000000
0000e2  9019              STR      r0,[sp,#0x64]
;;;96         ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC3;
0000e4  10c0              ASRS     r0,r0,#3
0000e6  901a              STR      r0,[sp,#0x68]
;;;97         ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
0000e8  2000              MOVS     r0,#0
0000ea  901b              STR      r0,[sp,#0x6c]
;;;98         ADC_InitStructure.ADC_NbrOfConversion = 1;
0000ec  2001              MOVS     r0,#1
0000ee  f88d0070          STRB     r0,[sp,#0x70]
;;;99         
;;;100        /* ADC1规则通道0配置 */ 
;;;101        ADC_Init(ADC1, &ADC_InitStructure);
0000f2  a917              ADD      r1,sp,#0x5c
0000f4  4814              LDR      r0,|L3.328|
0000f6  f7fffffe          BL       ADC_Init
;;;102        ADC_RegularChannelConfig(ADC1, ADC_Channel_10, 1, ADC_SampleTime_480Cycles); //ADC_SampleTime_480Cycles表示采样消耗时间
0000fa  2307              MOVS     r3,#7
0000fc  2201              MOVS     r2,#1
0000fe  210a              MOVS     r1,#0xa
000100  4811              LDR      r0,|L3.328|
000102  f7fffffe          BL       ADC_RegularChannelConfig
;;;103       
;;;104        /* ADC2规则通道0配置 */ 
;;;105        ADC_Init(ADC2, &ADC_InitStructure);
000106  a917              ADD      r1,sp,#0x5c
000108  4810              LDR      r0,|L3.332|
00010a  f7fffffe          BL       ADC_Init
;;;106        ADC_RegularChannelConfig(ADC2, ADC_Channel_14, 1, ADC_SampleTime_480Cycles);// 不要在2个ADC上转换相同的通道（手册），channel_10对应双ADC模式
00010e  2307              MOVS     r3,#7
000110  2201              MOVS     r2,#1
000112  210e              MOVS     r1,#0xe
000114  480d              LDR      r0,|L3.332|
000116  f7fffffe          BL       ADC_RegularChannelConfig
;;;107    
;;;108        /* 使能DMA请求 (多ADC模式) */
;;;109        ADC_MultiModeDMARequestAfterLastTransferCmd(ENABLE);
00011a  2001              MOVS     r0,#1
00011c  f7fffffe          BL       ADC_MultiModeDMARequestAfterLastTransferCmd
;;;110        
;;;111        /* 使能 ADC1 */
;;;112        ADC_Cmd(ADC1, ENABLE);
000120  2101              MOVS     r1,#1
000122  4809              LDR      r0,|L3.328|
000124  f7fffffe          BL       ADC_Cmd
;;;113        /* 使能 ADC2 */
;;;114        ADC_Cmd(ADC2, ENABLE);
000128  2101              MOVS     r1,#1
00012a  4808              LDR      r0,|L3.332|
00012c  f7fffffe          BL       ADC_Cmd
;;;115        
;;;116        /* 启动转换由外部定时器TIM1触发 */
;;;117    //    ADC_SoftwareStartConv(ADC2);
;;;118    }
000130  b01d              ADD      sp,sp,#0x74
000132  bd00              POP      {pc}
;;;119    
                          ENDP

                  |L3.308|
                          DCD      0x00400004
                  |L3.312|
                          DCD      0x40020800
                  |L3.316|
                          DCD      aADCDualConvertedValue
                  |L3.320|
                          DCD      0x40012308
                  |L3.324|
                          DCD      0x40026410
                  |L3.328|
                          DCD      0x40012000
                  |L3.332|
                          DCD      0x40012100

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  aADCDualConvertedValue
                          %        4096

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_adc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_adc_c_9b6e839a____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_adc_c_9b6e839a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_adc_c_9b6e839a____REVSH|
#line 144
|__asm___9_bsp_adc_c_9b6e839a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_adc_c_9b6e839a____RRX|
#line 300
|__asm___9_bsp_adc_c_9b6e839a____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
